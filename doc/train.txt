
================================================================================
Configuration Options:                                       *train.vim-options*

training_set............................................*train.vim.training_set*

conceal......................................................*train.vim.conceal*


conceal.level                                          *train.vim.conceal.level*

  Type: |Number|
  Default: `1`

  (Integer): The conceal level to set during training

  To configure:
    `call train#conf#set("conceal", "level", <value>)`

  To view:
    `call train#conf#get("conceal", "level")`


conceal.cursor                                        *train.vim.conceal.cursor*

  Type: |String|
  Default: `n`

  (String): The conceal cursor setting to use during training

  To configure:
    `call train#conf#set("conceal", "cursor", <value>)`

  To view:
    `call train#conf#get("conceal", "cursor")`


conceal.override                                    *train.vim.conceal.override*

  Type: |Bool|
  Default: `v:true`

  (Boolean): If false, conceal options will not be overridden

  To configure:
    `call train#conf#set("conceal", "override", <value>)`

  To view:
    `call train#conf#get("conceal", "override")`

vertical....................................................*train.vim.vertical*


vertical.basic                                        *train.vim.vertical.basic*

  Type: |List|
  Default: `['k', 'j', 'h', 'l', 'gg']`

  (string[]): List of basic vertical motions

  To configure:
    `call train#conf#set("vertical", "basic", <value>)`

  To view:
    `call train#conf#get("vertical", "basic")`


vertical.advanced                                  *train.vim.vertical.advanced*

  Type: |List|
  Default: `[]`

  (string[]): List of advanced vertical motions

  To configure:
    `call train#conf#set("vertical", "advanced", <value>)`

  To view:
    `call train#conf#get("vertical", "advanced")`


vertical.intermediate                          *train.vim.vertical.intermediate*

  Type: |List|
  Default: `['M', 'H', 'L']`

  (string[]): List of intermediate vertical motions

  To configure:
    `call train#conf#set("vertical", "intermediate", <value>)`

  To view:
    `call train#conf#get("vertical", "intermediate")`

input..........................................................*train.vim.input*


input.remap                                              *train.vim.input.remap*

  Type: |Bool|
  Default: `v:true`

  (Boolean): Should remap the input

  To configure:
    `call train#conf#set("input", "remap", <value>)`

  To view:
    `call train#conf#get("input", "remap")`


input.no_mark                                          *train.vim.input.no_mark*

  Type: |Bool|
  Default: `v:false`

  (Boolean): Whether a mark should be set or not during training

  To configure:
    `call train#conf#set("input", "no_mark", <value>)`

  To view:
    `call train#conf#get("input", "no_mark")`


================================================================================
Configuration Functions:                                   *train.vim-functions*

                                                         *train#conf#version(()*
train#conf#version()
    Get the version for this plugin
    Returns a semver dict

                                                   *train#conf#generate_docs(()*
train#conf#generate_docs()
    Returns a list of lines to be placed in your documentation
    Can use :call append(line("%"), func())

                                                           *train#conf#debug(()*
train#conf#debug()
    Print a debug statement containing information about the plugin
    and the versions of required plugins

                                                            *train#conf#menu(()*
train#conf#menu()
    Provide the user with an automatic "quickmenu"
    See |conf.menu|

                                                         *train#conf#require(()*
train#conf#require(semver)
    Require a version of this plugin.
    Returns false if not a high enough version

                                                             *train#conf#set(()*
train#conf#set(area, setting, value)
    Set a "value" for the "area.setting"
    See |conf.set_setting|

                                                             *train#conf#get(()*
train#conf#get(area, setting)
    Get the "value" for the "area.setting"
    See |conf.get_setting|

                                                            *train#conf#view(()*
train#conf#view()
    View the current configuration dictionary.
    Useful for debugging

                                                     *train#conf#insert_docs(()*
train#conf#insert_docs()
    Insert the generated docs under where you cursor is



 vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl:
